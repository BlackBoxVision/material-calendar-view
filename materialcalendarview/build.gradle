apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 25
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable "InvalidPackage"
        abortOnError true
    }
    packagingOptions {
        exclude "META-INF/services/javax.annotation.processing.Processor"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

retrolambda {
    jvmArgs "-noverify"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile 'com.android.support:appcompat-v7:25.1.0'
}

task findbugs(type: FindBugs) {
    description 'Run findbugs'
    group 'verification'
    classes = fileTree('build/intermediates/classes/debug/')
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    reportLevel = "high"
    ignoreFailures = true
    excludeFilter = file("config/quality/findbugs/findbugs-filter.xml")
    reports {
        xml.enabled = false
        html.enabled = true
        html {
            destination "$project.buildDir/reports/findbugs/findbugs-output.html"
        }
    }
}

task pmd(type: Pmd) {
    ignoreFailures = true
    ruleSetFiles = files("config/quality/pmd/pmd-ruleset.xml")
    ruleSets = []

    //source 'src'
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        //xml.enabled = false
        html.enabled = true
//        xml {
//            destination "$project.buildDir/reports/pmd/pmd.xml"
//        }
        html {
            destination "$project.buildDir/reports/pmd/pmd.html"
        }
    }
}

task checkstyle(type: Checkstyle) {
    ignoreFailures = true
    configFile file("config/quality/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("config/quality/checkstyle/suppressions.xml").absolutePath
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
    reports {
        xml.enabled = true
        //  html.enabled = true
        xml {
            destination "$project.buildDir/reports/checkstyle/checkstyle.xml"
        }
//        html {
//            destination "$project.buildDir/reports/checkstyle/checkstyle.html"
//        }
    }
}

check.doLast {
    project.tasks.getByName("findbugs").execute()
    project.tasks.getByName("pmd").execute()
    project.tasks.getByName("checkstyle").execute()
}
